apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |-
      [
        {
          "apiVersion": "intel.com/v1alpha1",
          "kind": "Ovms",
          "metadata": {
            "name": "ovms-sample"
          },
          "spec": {
            "aws_access_key_id": "",
            "aws_region": "",
            "aws_secret_access_key": "",
            "config_configmap_name": "",
            "gcp_creds_secret_name": "",
            "grpc_port": 8080,
            "https_proxy": "",
            "image_name": "registry.connect.redhat.com/intel/openvino-model-server:latest",
            "log_level": "INFO",
            "model_name": "resnet",
            "model_path": "gs://ovms-public-eu/resnet50-binary",
            "models_host_path": "",
            "models_volume_claim": "",
            "nireq": "",
            "plugin_config": "{\\\"CPU_THROUGHPUT_STREAMS\\\":\\\"1\\\"}",
            "replicas": 1,
            "resources": {
              "limits": {
                "cpu": 4,
                "memory": "250Mi"
              }
            },
            "rest_port": 8081,
            "s3_compat_api_endpoint": "",
            "security_context": {},
            "service_type": "ClusterIP",
            "target_device": "CPU"
          }
        }
      ]
    capabilities: Basic Install
    categories: "AI/Machine Learning"
    operators.operatorframework.io/builder: operator-sdk-v1.4.0
    operators.operatorframework.io/project_layout: helm.sdk.operatorframework.io/v1
  name: ovms-operator.v0.1.0
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - kind: Ovms
      name: ovms.intel.com
      version: v1alpha1
  description: |
    [OpenVINO™ Model Server](https://github.com/openvinotoolkit/model_server) (OVMS) is a scalable, high-performance solution for serving machine learning models optimized for Intel® architectures. The server provides an inference service via gRPC or REST API - making it easy to deploy new algorithms and AI experiments using the same architecture as [TensorFlow Serving](https://github.com/tensorflow/serving) for any models trained in a framework that is supported by [OpenVINO](https://software.intel.com/en-us/openvino-toolkit).
    ## About this Operator
    This Operator is based on a [Helm chart](https://github.com/openvinotoolkit/model_server/tree/main/deploy) for OVMS. It supports all the parameters from the helm chart.
    ## Using the cluster
    OpenVINO Model Server can be consumed as a `Service` with the name matching the `Ovms` record.
    ```
    oc get pods
    NAME                           READY   STATUS    RESTARTS   AGE
    ovms-sample-586f6f76df-dpps4   1/1     Running   0          8h

    oc get services
    NAME          TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)             AGE
    ovms-sample   ClusterIP   172.25.199.210   <none>        8080/TCP,8081/TCP   8h
    ```
    ## Before you start
    Depending on the deployment configuration there might be pre-requisites for additional records to be created in the cluster. 
    ## References
    OpenVINO Model Server on [Github](https://github.com/openvinotoolkit/model_server/tree/main/extras/ovms-operator) 
  displayName: OpenVINO Model Server Operator
  icon:
  - base64data: 
    mediatype: image/png
  install:
    spec:
      clusterPermissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - namespaces
          verbs:
          - get
        - apiGroups:
          - ""
          resources:
          - secrets
          verbs:
          - '*'
        - apiGroups:
          - ""
          resources:
          - events
          verbs:
          - create
        - apiGroups:
          - intel.com
          resources:
          - ovms
          - ovms/status
          - ovms/finalizers
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - ""
          resources:
          - services
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - apps
          resources:
          - deployments
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - authentication.k8s.io
          resources:
          - tokenreviews
          verbs:
          - create
        - apiGroups:
          - authorization.k8s.io
          resources:
          - subjectaccessreviews
          verbs:
          - create
        serviceAccountName: default
      deployments:
      - name: ovms-operator-controller-manager
        spec:
          replicas: 1
          selector:
            matchLabels:
              control-plane: controller-manager
          strategy: {}
          template:
            metadata:
              labels:
                control-plane: controller-manager
            spec:
              containers:
              - args:
                - --secure-listen-address=0.0.0.0:8443
                - --upstream=http://127.0.0.1:8080/
                - --logtostderr=true
                - --v=10
                image: gcr.io/kubebuilder/kube-rbac-proxy:v0.5.0
                name: kube-rbac-proxy
                ports:
                - containerPort: 8443
                  name: https
                resources: {}
              - args:
                - --metrics-addr=127.0.0.1:8080
                - --enable-leader-election
                - --leader-election-id=ovms-operator
                image: registry.connect.redhat.com/intel/ovms-operator:0.1.0
                name: manager
                resources:
                  limits:
                    cpu: 100m
                    memory: 200Mi
                  requests:
                    cpu: 100m
                    memory: 60Mi
              terminationGracePeriodSeconds: 10
      permissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - configmaps
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - ""
          resources:
          - events
          verbs:
          - create
          - patch
        serviceAccountName: default
    strategy: deployment
  installModes:
  - supported: false
    type: OwnNamespace
  - supported: false
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  keywords:
  - AI Inference OpenVINO
  links:
  - name: Ovms Operator
    url: https://github.com/openvinotoolkit/model_server/tree/main/extras/ovms-operator
  maturity: alpha
  provider:
    name: Intel
    url: https://github.com/openvinotoolkit/model_server
  version: 0.1.0
