#
# Copyright (c) 2021 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Optimizations used for TF Serving release builds.
build:release --copt=-mavx
build:release --copt=-msse4.2

# Options used to build with CUDA.
build:cuda --crosstool_top=@local_config_cuda//crosstool:toolchain
build:cuda --define=using_cuda=true --define=using_cuda_nvcc=true

# Please note that MKL on MacOS or windows is still not supported.
# If you would like to use a local MKL instead of downloading, please set the
# environment variable "TF_MKL_ROOT" every time before build.
build:mkl --define=build_with_mkl=true --define=enable_mkl=true
build:mkl --define=tensorflow_mkldnn_contraction_kernel=0

# This config option is used to enable MKL-DNN open source library only,
# without depending on MKL binary version.
build:mkl_open_source_only --define=build_with_mkl_dnn_only=true
build:mkl_open_source_only --define=build_with_mkl=true --define=enable_mkl=true
build:mkl_open_source_only --define=tensorflow_mkldnn_contraction_kernel=0

# Processor native optimizations (depends on build host capabilities).
build:nativeopt --copt=-march=native
build:nativeopt --host_copt=-march=native
build:nativeopt --copt=-O3

# those below are required for XNNPACK build with gcc <12 (ubuntu 22 default is 11)
build --define=xnn_enable_avxvnniint8=false
build --define=xnn_enable_avx512fp16=false
build --define=xnn_enable_avx512amx=false
build --define xnn_enable_avxvnni=false
# TODO to check
build --define=no_cuda=1

build --spawn_strategy=standalone
build --genrule_strategy=standalone
build --define=grpc_no_ares=true

# Default select settings
build --define=MEDIAPIPE_DISABLE_GPU=1
build --define=MEDIAPIPE_DISABLE=0
build --define=CLOUD_DISABLE=0
build --define=PYTHON_DISABLE=0

# Sets the default Apple platform to macOS.
build --apple_platform_type=macos

build -c opt
# fixing debug builds with ignore warnings
build --copt=-O2
build --copt=-DGRPC_BAZEL_BUILD
# Adding "--cxxopt=-D_GLIBCXX_USE_CXX11_ABI=0" creates parity with TF
# compilation options. It also addresses memory use due to
# copy-on-write semantics of std::strings of the older ABI.
build --cxxopt=-D_GLIBCXX_USE_CXX11_ABI=1

build --enable_platform_specific_config
build --experimental_repo_remote_exec
build --experimental_cc_shared_library
build --check_visibility=true
# Disable leaking LD_LIBRARY_PATH & PATH into build resulting in cache misses
# and frequent rebuilds
build --incompatible_strict_action_env
build --cxxopt=-DOVMS_DUMP_TO_FILE=0
build --remote_upload_local_results=true

build:avx_win --copt=/arch=AVX
build:avx2_win --copt=/arch=AVX2

# Linux settings #######################################################################################################
# LLVM, MLIR and TF require C++14, we use C++17 in project
build:linux --cxxopt=-std=c++17
build:linux --host_cxxopt=-std=c++17

# For Tensorflow building only
build:linux --action_env PYTHON_BIN_PATH="/usr/bin/python3"
build:linux --define PYTHON_BIN_PATH=/usr/bin/python3

build:linux --define=USE_DROGON=1  # 0=legacy net_http, available only on linux
# Security options ######################################################################################################
# TODO: Add equivalent windows flag
build:linux --cxxopt=-fno-strict-overflow
build:linux --cxxopt=-fno-delete-null-pointer-checks
build:linux --cxxopt=-fwrapv
build:linux --cxxopt=-fstack-protector
build:linux --cxxopt=-fstack-clash-protection
build:linux --cxxopt=-Wformat
build:linux --cxxopt=-Wformat-security
build:linux --cxxopt=-Werror=format-security

# TODO: Add equivalent windows flag
build:linux --force_pic
