#
# Copyright (c) 2020 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Optimizations used for TF Serving release builds.
build:release --copt=-mavx
build:release --copt=-msse4.2

# Options used to build with CUDA.
build:cuda --crosstool_top=@local_config_cuda//crosstool:toolchain
build:cuda --define=using_cuda=true --define=using_cuda_nvcc=true

# Please note that MKL on MacOS or windows is still not supported.
# If you would like to use a local MKL instead of downloading, please set the
# environment variable "TF_MKL_ROOT" every time before build.
build:mkl --define=build_with_mkl=true --define=enable_mkl=true
build:mkl --define=tensorflow_mkldnn_contraction_kernel=0

# This config option is used to enable MKL-DNN open source library only,
# without depending on MKL binary version.
build:mkl_open_source_only --define=build_with_mkl_dnn_only=true
build:mkl_open_source_only --define=build_with_mkl=true --define=enable_mkl=true
build:mkl_open_source_only --define=tensorflow_mkldnn_contraction_kernel=0

# Processor native optimizations (depends on build host capabilities).
build:nativeopt --copt=-march=native
build:nativeopt --host_copt=-march=native
build:nativeopt --copt=-O3

# For Tensorflow building only
build --action_env PYTHON_BIN_PATH="/usr/bin/python3"
build --define PYTHON_BIN_PATH=/usr/bin/python3

build --spawn_strategy=standalone
build --genrule_strategy=standalone

build --define=grpc_no_ares=true
build --define=MEDIAPIPE_DISABLE_GPU=1
coverage --define=MEDIAPIPE_DISABLE_GPU=1
test --define=MEDIAPIPE_DISABLE_GPU=1

build --define=MEDIAPIPE_DISABLE=0
coverage --define=MEDIAPIPE_DISABLE=0
test --define=MEDIAPIPE_DISABLE=0

build --define=CLOUD_DISABLE=0
coverage --define=CLOUD_DISABLE=0
test --define=CLOUD_DISABLE=0

build --define=PYTHON_DISABLE=0
coverage --define=PYTHON_DISABLE=0
test --define=PYTHON_DISABLE=0

# sometimes failed logs exceed this threshold
test --experimental_ui_max_stdouterr_bytes=104857600

# Sets the default Apple platform to macOS.
build --apple_platform_type=macos

build -c opt
build --copt=-DGRPC_BAZEL_BUILD

# fixing debug builds with ignore warnings
build --copt=-O2

# LLVM, MLIR and TF require C++14, we use C++17 in project
build:linux --cxxopt=-std=c++17
build:linux --host_cxxopt=-std=c++17

build:windows --host_cxxopt=/std:c++17
build:windows --cxxopt=/std:c++17
build:windows --copt=/std:c++17
build:windows --objccopt=/std:c++17
#build:windows --per_file_copt=*@/std=c++latest
build:windows --action_env BAZEL_CXXOPTS="/std:c++17"
build:windows --action_env BAZEL_COPTS="/std:c++17"
build:windows --action_env BAZEL_OBJCOPTS="/std:c++17"

# Fixing compiler errors:
#build:windows --cxxopt=/translateInclude=no
build:windows --enable_platform_specific_config

# Security options
# TODO: Add equivalent windows flag
build:linux --cxxopt=-fno-strict-overflow
build:linux --cxxopt=-fno-delete-null-pointer-checks
build:linux --cxxopt=-fwrapv
build:linux --cxxopt=-fstack-protector
build:linux --cxxopt=-fstack-clash-protection
build:linux --cxxopt=-Wformat
build:linux --cxxopt=-Wformat-security
build:linux --cxxopt=-Werror=format-security

# Adding "--cxxopt=-D_GLIBCXX_USE_CXX11_ABI=0" creates parity with TF
# compilation options. It also addresses memory use due to
# copy-on-write semantics of std::strings of the older ABI.
build --cxxopt=-D_GLIBCXX_USE_CXX11_ABI=1

common --noenable_bzlmod
build --experimental_repo_remote_exec
# TODO: Add equivalent windows flag
build:linux --force_pic
build --experimental_cc_shared_library

build --check_visibility=true

build --cxxopt=-DOVMS_DUMP_TO_FILE=0
coverage --cxxopt=-DOVMS_DUMP_TO_FILE=0
test --cxxopt=-DOVMS_DUMP_TO_FILE=0
test --test_env PYTHONPATH=/opt/intel/openvino/python:/ovms/bazel-bin/src/python/binding

# Suppress all C++ compiler warnings, otherwise build logs become 10s of MBs.
build:linux --host_copt=-w
build:windows --copt=/W0
build:windows --host_copt=/W0

# Speed Windows compile times. Available in VS 16.4 (we are on 16.11). See
# https://groups.google.com/a/tensorflow.org/d/topic/build/SsW98Eo7l3o/discussion
build:windows --copt=/d2ReducedOptimizeHugeFunctions
build:windows --host_copt=/d2ReducedOptimizeHugeFunctions

# Verbose failure logs when something goes wrong
build:windows --verbose_failures

# Work around potential issues with large command lines on windows.
# See: https://github.com/bazelbuild/bazel/issues/5163
build:windows --features=compiler_param_file

# Make sure to include as little of windows.h as possible
build:windows --copt=-DWIN32_LEAN_AND_MEAN
build:windows --host_copt=-DWIN32_LEAN_AND_MEAN
build:windows --copt=-DNOGDI
build:windows --host_copt=-DNOGDI

# Misc build options we need for windows.
build:windows --linkopt=/DEBUG
build:windows --host_linkopt=/DEBUG
build:windows --linkopt=/OPT:REF
build:windows --host_linkopt=/OPT:REF
build:windows --linkopt=/OPT:ICF
build:windows --host_linkopt=/OPT:ICF
