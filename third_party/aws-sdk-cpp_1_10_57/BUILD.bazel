#
# Copyright (c) 2020 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Description:
#   AWS C++ SDK

package(default_visibility = ["//visibility:public"])

licenses(["notice"])  # Apache 2.0

exports_files(["LICENSE"])

cc_library(
    name = "core",
    srcs = glob([
        "src/aws-cpp-sdk-core/source/*.cpp",  # AWS_SOURCE
        "src/aws-cpp-sdk-core/source/external/tinyxml2/*.cpp",  # AWS_TINYXML2_SOURCE
        "src/aws-cpp-sdk-core/source/external/cjson/*.cpp",  # CJSON_SOURCE
        "src/aws-cpp-sdk-core/source/auth/*.cpp",  # AWS_AUTH_SOURCE
        "src/aws-cpp-sdk-core/source/client/*.cpp",  # AWS_CLIENT_SOURCE
        "src/aws-cpp-sdk-core/source/internal/*.cpp",  # AWS_INTERNAL_SOURCE
        "src/aws-cpp-sdk-core/source/aws/model/*.cpp",  # AWS_MODEL_SOURCE
        "src/aws-cpp-sdk-core/source/http/*.cpp",  # HTTP_SOURCE
        "src/aws-cpp-sdk-core/source/http/standard/*.cpp",  # HTTP_STANDARD_SOURCE
        "src/aws-cpp-sdk-core/source/config/*.cpp",  # CONFIG_SOURCE
        "src/aws-cpp-sdk-core/source/monitoring/*.cpp",  # MONITORING_SOURCE
        "src/aws-cpp-sdk-core/source/utils/*.cpp",  # UTILS_SOURCE
        "src/aws-cpp-sdk-core/source/utils/event/*.cpp",  # UTILS_EVENT_SOURCE
        "src/aws-cpp-sdk-core/source/utils/base64/*.cpp",  # UTILS_BASE64_SOURCE
        "src/aws-cpp-sdk-core/source/utils/crypto/*.cpp",  # UTILS_CRYPTO_SOURCE
        "src/aws-cpp-sdk-core/source/utils/json/*.cpp",  # UTILS_JSON_SOURCE
        "src/aws-cpp-sdk-core/source/utils/threading/*.cpp",  # UTILS_THREADING_SOURCE
        "src/aws-cpp-sdk-core/source/utils/xml/*.cpp",  # UTILS_XML_SOURCE
        "src/aws-cpp-sdk-core/source/utils/logging/*.cpp",  # UTILS_LOGGING_SOURCE
        "src/aws-cpp-sdk-core/source/utils/memory/*.cpp",  # UTILS_MEMORY_SOURCE
        "src/aws-cpp-sdk-core/source/utils/memory/stl/*.cpp",  # UTILS_MEMORY_STL_SOURCE
        "src/aws-cpp-sdk-core/source/utils/stream/*.cpp",  # UTILS_STREAM_SOURCE
        "src/aws-cpp-sdk-core/source/utils/crypto/factory/*.cpp",  # UTILS_CRYPTO_FACTORY_SOURCE
        "src/aws-cpp-sdk-core/source/http/curl/*.cpp",  # HTTP_CURL_CLIENT_SOURCE
        "src/aws-cpp-sdk-core/source/utils/crypto/openssl/*.cpp",  # UTILS_CRYPTO_OPENSSL_SOURCE
    ]) + select({
        "@bazel_tools//src/conditions:windows": glob([
            "aws-cpp-sdk-core/source/net/windows/*.cpp",  # NET_SOURCE
            "aws-cpp-sdk-core/source/platform/windows/*.cpp",  # PLATFORM_WINDOWS_SOURCE
        ]),
        "//conditions:default": glob([
            "aws-cpp-sdk-core/source/net/linux-shared/*.cpp",  # NET_SOURCE
            "aws-cpp-sdk-core/source/platform/linux-shared/*.cpp",  # PLATFORM_LINUX_SHARED_SOURCE
        ]),
    }),
    hdrs = [
        "aws-cpp-sdk-core/include/aws/core/SDKConfig.h", # this will be created by genrule:
         ":SDKConfig_h",
    ] + glob([
        "aws-cpp-sdk-core/include/aws/core/*.h",  # AWS_HEADERS
        "aws-cpp-sdk-core/include/aws/core/auth/*.h",  # AWS_AUTH_HEADERS
        "aws-cpp-sdk-core/include/aws/core/client/*.h",  # AWS_CLIENT_HEADERS
        "aws-cpp-sdk-core/include/aws/core/internal/*.h",  # AWS_INTERNAL_HEADERS
        "aws-cpp-sdk-core/include/aws/core/net/*.h",  # NET_HEADERS
        "aws-cpp-sdk-core/include/aws/core/http/*.h",  # HTTP_HEADERS
        "aws-cpp-sdk-core/include/aws/core/http/standard/*.h",  # HTTP_STANDARD_HEADERS
        "aws-cpp-sdk-core/include/aws/core/config/*.h",  # CONFIG_HEADERS
        "aws-cpp-sdk-core/include/aws/core/monitoring/*.h",  # MONITORING_HEADERS
        "aws-cpp-sdk-core/include/aws/core/platform/*.h",  # PLATFORM_HEADERS
        "aws-cpp-sdk-core/include/aws/core/utils/*.h",  # UTILS_HEADERS
        "aws-cpp-sdk-core/include/aws/core/utils/event/*.h",  # UTILS_EVENT_HEADERS
        "aws-cpp-sdk-core/include/aws/core/utils/base64/*.h",  # UTILS_BASE64_HEADERS
        "aws-cpp-sdk-core/include/aws/core/utils/crypto/*.h",  # UTILS_CRYPTO_HEADERS
        "aws-cpp-sdk-core/include/aws/core/utils/json/*.h",  # UTILS_JSON_HEADERS
        "aws-cpp-sdk-core/include/aws/core/utils/threading/*.h",  # UTILS_THREADING_HEADERS
        "aws-cpp-sdk-core/include/aws/core/utils/xml/*.h",  # UTILS_XML_HEADERS
        "aws-cpp-sdk-core/include/aws/core/utils/memory/*.h",  # UTILS_MEMORY_HEADERS
        "aws-cpp-sdk-core/include/aws/core/utils/memory/stl/*.h",  # UTILS_STL_HEADERS
        "aws-cpp-sdk-core/include/aws/core/utils/logging/*.h",  # UTILS_LOGGING_HEADERS
        "aws-cpp-sdk-core/include/aws/core/utils/ratelimiter/*.h",  # UTILS_RATE_LIMITER_HEADERS
        "aws-cpp-sdk-core/include/aws/core/utils/stream/*.h",  # UTILS_STREAM_HEADERS
        "aws-cpp-sdk-core/include/aws/core/external/cjson/*.h",  # CJSON_HEADERS
        "aws-cpp-sdk-core/include/aws/core/external/tinyxml2/*.h",  # TINYXML2_HEADERS
        "aws-cpp-sdk-core/include/aws/core/http/curl/*.h",  # HTTP_CURL_CLIENT_HEADERS
        "aws-cpp-sdk-core/include/aws/core/utils/crypto/openssl/*.h",  # UTILS_CRYPTO_OPENSSL_HEADERS
    ]),
    defines = [
        'AWS_SDK_VERSION_STRING=\\"1.1.111\\"',
        "AWS_SDK_VERSION_MAJOR=1",
        "AWS_SDK_VERSION_MINOR=11",
        "AWS_SDK_VERSION_PATCH=111",
        "ENABLE_OPENSSL_ENCRYPTION=1", # TODO
        "ENABLE_CURL_CLIENT=1", # TODO
        "OPENSSL_IS_BORINGSSL=0", # TODO
        "PLATFORM_LINUX",
# from dockerfile
        "CMAKE_BUILD_TYPE=Release",
        "BUILD_ONLY=s3",
        "ENABLE_TESTING=OFF",
        "BUILD_SHARED_LIBS=OFF",
        "MINIMIZE_SIZE=ON",
        "CMAKE_POSITION_INDEPENDENT_CODE=ON",
        "FORCE_SHARED_CRT=OFF",
        "SIMPLE_INSTALL=OFF",
       
    ],
    includes = [
        "aws-cpp-sdk-core/include",
    ],
    linkopts = [],
    deps = [
        ":SDKConfig_h",
        "@aws-c-common//:aws-c-common", # TODO check genrule
 #       "@aws-crt-cpp//:aws-crt-cpp",
        "@aws-c-event-stream//:aws-c-event-stream", # TODO check genrule
        #"@aws-c-event-stream",
        #"@boringssl//:crypto",
        #"@boringssl//:ssl",
        #"@curl",
    ],
)

cc_library(
    name = "s3",
    srcs = glob([
        "aws-cpp-sdk-s3/source/*.cpp",  # AWS_S3_SOURCE
        "aws-cpp-sdk-s3/source/model/*.cpp",  # AWS_S3_MODEL_SOURCE
    ]),
    hdrs = glob([
        "aws-cpp-sdk-s3/include/aws/s3/*.h",  # AWS_S3_HEADERS
        "aws-cpp-sdk-s3/include/aws/s3/model/*.h",  # AWS_S3_MODEL_HEADERS # TODO
    ]),
    includes = [
        "src/aws-cpp-sdk-s3/include",
    ],
    deps = [
        ":core",
    ],
)

genrule(
    name = "SDKConfig_h",
    outs = [
        "aws-cpp-sdk-core/include/aws/core/SDKConfig.h",
    ],
    cmd = "\n".join([
        "cat <<'EOF' >$@",
        "#define JSON_USE_EXCEPTION 0",
        "EOF",
    ]),
)

