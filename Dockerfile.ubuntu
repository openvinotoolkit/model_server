#
# Copyright (c) 2021 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

ARG BASE_IMAGE
ARG BUILD_IMAGE=build
ARG PKG_IMAGE=pkg

FROM $BASE_IMAGE as base_build

SHELL ["/bin/bash", "-xo", "pipefail", "-c"]

ARG JOBS=8
ENV DEBIAN_FRONTEND=noninteractive
ARG BASE_IMAGE
RUN apt-get update && apt-get install --no-install-recommends -y \
            build-essential \
            gcc-9 \
            g++-9 \
            make \
            cmake \
            automake \
            autoconf \
            curl \
            ca-certificates \
            gpg \
            libcurl4-openssl-dev \
            libssl-dev \
            libva-dev \
            libxml2-dev \
            patch \
            pkg-config \
            wget \
            zlib1g-dev && \
            update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 9 && \
            update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 9 && \
            apt-get clean && \
            rm -rf /var/lib/apt/lists/*
            
# Need to upgrade git for ubuntu22 git vulnerability fix
RUN apt-get update ; \
    if [[ "$BASE_IMAGE" == *"22.04"* ]] ; then \
        apt-get install -y --no-install-recommends software-properties-common gpg-agent ; \
        add-apt-repository ppa:git-core/ppa -y ; \
        apt-get update && apt-get install --no-install-recommends -y git ; \
        apt-get clean ; \
        rm -rf /var/lib/apt/lists/* ; \
    else \
        apt-get install -y --no-install-recommends software-properties-common git ; \
        apt-get clean ; \
        rm -rf /var/lib/apt/lists/* ; \
    fi ;

WORKDIR /
# hadolint ignore=DL3003
RUN wget -nv https://go.dev/dl/go1.24.4.linux-amd64.tar.gz && \
tar -C /usr/local -xzf go1.24.4.linux-amd64.tar.gz && \
git clone https://github.com/git-lfs/git-lfs && \
    cd git-lfs && \
    git checkout 9e751d16509c9d65bda15b53c7d30a583c66e0c8 && \
    /usr/local/go/bin/go build . && \
    cp git-lfs /usr/bin/git-lfs

####### Azure SDK needs new boost:
WORKDIR /boost
# hadolint ignore=DL3003
RUN wget -nv https://sourceforge.net/projects/boost/files/boost/1.69.0/boost_1_69_0.tar.gz && \
tar xf boost_1_69_0.tar.gz && cd boost_1_69_0 && ./bootstrap.sh && \
sed -i -e 's|#if PTHREAD_STACK_MIN > 0|#ifdef PTHREAD_STACK_MIN|g' boost/thread/pthread/thread_data.hpp && \
# fix for compiler >=9.5 https://github.com/boostorg/thread/pull/297/files
./b2 -j ${JOBS} cxxstd=17 link=static cxxflags='-fPIC' cflags='-fPIC' \
--with-chrono --with-date_time --with-filesystem --with-program_options --with-system \
--with-random --with-thread --with-atomic --with-regex \
--with-log --with-locale \
install

COPY third_party/azure /ovms/third_party/azure
COPY third_party/cpprest /ovms/third_party/cpprest

####### Azure SDK
WORKDIR /azure
RUN apt-get update && apt-get install --no-install-recommends -y uuid uuid-dev && rm -rf /var/lib/apt/lists/*
RUN git clone --recurse-submodules --depth 1 --branch v2.10.16 https://github.com/Microsoft/cpprestsdk.git && \
    git clone --depth 1 --branch v7.5.0 https://github.com/Azure/azure-storage-cpp.git && \
    patch -d /azure/cpprestsdk/ -p1 < /ovms/third_party/cpprest/rest_sdk_v2.10.16.patch && \
    patch -d /azure/azure-storage-cpp/ -p1 </ovms/third_party/azure/azure_sdk.patch

WORKDIR /azure/cpprestsdk/Release/build.release
RUN cmake .. -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_CXX_FLAGS="-fPIC" -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DBoost_USE_STATIC_RUNTIME=ON -DBoost_USE_STATIC_LIBS=ON -DWERROR=OFF -DBUILD_SAMPLES=OFF -DBUILD_TESTS=OFF && make --jobs=$JOBS install

WORKDIR /azure/azure-storage-cpp/Microsoft.WindowsAzure.Storage/build.release
RUN CASABLANCA_DIR=/azure/cpprestsdk cmake .. -DCMAKE_CXX_FLAGS="-fPIC -Wno-error=deprecated-declarations" -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DBoost_USE_STATIC_RUNTIME=ON -DBoost_USE_STATIC_LIBS=ON -DCMAKE_VERBOSE_MAKEFILE=ON && make --jobs=$JOBS && make --jobs=$JOBS install
# no-error flag related to https://github.com/aws/aws-sdk-cpp/issues/1582
####### End of Azure SDK

####### Build OpenCV
COPY third_party/opencv /ovms/third_party/opencv
WORKDIR /ovms/third_party/opencv
RUN ./install_opencv.sh
####### End of OpenCV

################### BASE BUILD ##########################
FROM base_build as build
ARG BASE_IMAGE
ARG BASE_OS
ENV DEBIAN_FRONTEND=noninteractive
SHELL ["/bin/bash", "-xo", "pipefail", "-c"]

ARG debug_bazel_flags="--strip=always  --config=mp_on_py_on --//:distro=ubuntu"
RUN if [ "$BASE_OS" == "ubuntu24" ] ; then apt-get update && \
    apt-get install -y software-properties-common --no-install-recommends; add-apt-repository 'ppa:deadsnakes/ppa' -y && \
    apt-get clean && rm -rf /var/lib/apt/lists/* ; fi
ENV PIP_BREAK_SYSTEM_PACKAGES=1
RUN apt-get update && apt-get install --no-install-recommends -y \
            libgflags-dev \
            bc \
            ca-certificates \
            curl \
            default-jdk \
            lcov \
            less \
            libpugixml1v5 \
            libtool \
            libnuma-dev \
            libtbb-dev \
            libssl-dev \
            libxml2 \
            python3.10-dev \
            python3.10-venv \
            python3-pip \
            unzip \
            gdb \
            tree \
            vim && \
            apt-get clean && \
            rm -rf /var/lib/apt/lists/*
# on ubuntu 24.04 python3.12 is used as default python for ovms build and release
# TF build needs python3.10 with numpy as it does not support python3.12
RUN python3.10 -m pip install "numpy<2.0.0" --no-cache-dir
RUN if [ "$BASE_OS" == "ubuntu24" ] ; then apt-get update ; apt-get install python3.12-dev -y --no-install-recommends ; apt-get clean && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1 && \
    apt-get clean && rm -rf /var/lib/apt/lists/* && \
    python3.12 -m pip install "Jinja2==3.1.6" "MarkupSafe==3.0.2" "numpy<2.0.0" --no-cache-dir ; fi
RUN if [ "$BASE_OS" == "ubuntu22" ] ; then python3 -m pip install "Jinja2==3.1.6" "MarkupSafe==3.0.2" --no-cache-dir ; fi

ARG JOBS=8
ARG ov_use_binary=0
ARG ov_source_org=openvinotoolkit
ARG ov_contrib_org=openvinotoolkit
ARG DLDT_PACKAGE_URL
ARG ov_source_branch=master
ARG ov_contrib_branch=master
ARG CMAKE_BUILD_TYPE=Release

ENV HDDL_INSTALL_DIR=/opt/intel/openvino/deployment_tools/inference_engine/external/hddl
ENV TF_SYSTEM_LIBS="curl"

# Set up Bazel
ENV BAZEL_VERSION 6.1.1
WORKDIR /bazel
RUN curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \
    chmod +x bazel-*.sh && \
    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh

ENV TEST_LOG="/root/.cache/bazel/_bazel_root/bc57d4817a53cab8c785464da57d1983/execroot/ovms/bazel-out/test.log"

################### BUILD OPENVINO FROM SOURCE - buildarg ov_use_binary=0  ############################
# hadolint ignore=DL3003
RUN if [ "$ov_use_binary" == "0" ] ; then true ; else exit 0 ; fi ; git clone https://github.com/$ov_source_org/openvino.git /openvino && cd /openvino && git checkout $ov_source_branch && git submodule update --init --recursive
WORKDIR /openvino/build
RUN if [ "$ov_use_binary" == "0" ]; then true ; else exit 0 ; fi ; if ! [[ $debug_bazel_flags == *"py_off"* ]]; then true ; else exit 0 ; fi ; cmake -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE -DENABLE_PYTHON=ON -DENABLE_SAMPLES=0 -DCMAKE_CXX_FLAGS=" -Wno-error=parentheses " -DENABLE_CPPLINT=OFF -DENABLE_INTEL_NPU_PROTOPIPE=OFF ..
RUN if [ "$ov_use_binary" == "0" ] && [[ $debug_bazel_flags == *"py_off"* ]]; then true ; else exit 0 ; fi ; cmake -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE -DENABLE_SAMPLES=0 -DCMAKE_CXX_FLAGS=" -Wno-error=parentheses " -DENABLE_CPPLINT=OFF -DENABLE_INTEL_NPU_PROTOPIPE=OFF ..
RUN if [ "$ov_use_binary" == "0" ] ; then true ; else exit 0 ; fi ; make --jobs=$JOBS
RUN if [ "$ov_use_binary" == "0" ] ; then true ; else exit 0 ; fi ; make install
RUN if [ "$ov_use_binary" == "0" ] ; then true ; else exit 0 ; fi ; \
    mkdir -p /opt/intel/openvino && \
    ln -s /usr/local/runtime /opt/intel/openvino && \
    ln -s /openvino/scripts/setupvars/setupvars.sh /opt/intel/openvino/setupvars.sh && \
    ln -s /opt/intel/openvino /opt/intel/openvino_2025
RUN if [ "$ov_use_binary" == "0" ]; then true ; else exit 0 ; fi ; if ! [[ $debug_bazel_flags == *"py_off"* ]]; then true ; else exit 0 ; fi ; mkdir -p /opt/intel/openvino && cp -r /openvino/bin/intel64/${CMAKE_BUILD_TYPE}/python /opt/intel/openvino/
RUN if [ "$ov_use_binary" == "0" ]; then true ; else exit 0 ; fi ; if ! [[ $debug_bazel_flags == *"py_off"* ]]; then true ; else exit 0 ; fi ; cp -r /openvino/tools/ovc/* /opt/intel/openvino/python

################## END OF OPENVINO SOURCE BUILD ######################

ARG TEMP_DIR=/tmp/openvino_installer

################### TAKE OPENVINO FROM A BINARY RELEASE - buildarg ov_use_binary=1 (DEFAULT) ##########
WORKDIR $TEMP_DIR

# OV toolkit package
RUN if [ "$ov_use_binary" == "1" ] && [ "$DLDT_PACKAGE_URL" != "" ]; then true ; else exit 0 ; fi ; \
    wget -nv $DLDT_PACKAGE_URL && \
    mkdir /opt/intel && \
    tar -zxf ./*openvino_toolkit*.tgz -C /opt/intel && \
    ln -s /opt/intel/*openvino_toolkit* /opt/intel/openvino && \
    ln -s /opt/intel/*openvino_toolkit* /opt/intel/openvino_2025

# update oneTBB
RUN wget -nv https://github.com/oneapi-src/oneTBB/releases/download/v2021.13.0/oneapi-tbb-2021.13.0-lin.tgz && \
    tar -zxf oneapi-tbb-2021.13.0-lin.tgz && \
    rm /opt/intel/openvino/runtime/3rdparty/tbb/lib/*.so* && \
    cp -vP oneapi-tbb-2021.13.0/lib/intel64/gcc4.8/*.so* /opt/intel/openvino/runtime/3rdparty/tbb/lib/ && \
    rm -f /opt/intel/openvino/oneapi-tbb-2021.13.0-lin.tgz

WORKDIR /
# install sample apps including benchmark_app
RUN if [ -f /opt/intel/openvino/samples/cpp/build_samples.sh ];  then /opt/intel/openvino/samples/cpp/build_samples.sh ; fi
#################### END OF OPENVINO BINARY INSTALL

# OpenVINO Tokenizers extension
ENV OpenVINO_DIR=/opt/intel/openvino/runtime/cmake
ENV OPENVINO_TOKENIZERS_PATH_GENAI=/opt/intel/openvino/runtime/lib/intel64/libopenvino_tokenizers.so

ARG ov_tokenizers_branch=master
# hadolint ignore=DL3003
RUN  git clone https://github.com/openvinotoolkit/openvino_tokenizers.git /openvino_tokenizers && cd /openvino_tokenizers && git checkout $ov_tokenizers_branch && git submodule update --init --recursive
WORKDIR /openvino_tokenizers/build
RUN cmake .. -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE && cmake --build . --parallel $JOBS ; cp /openvino_tokenizers/build/src/lib*.so /opt/intel/openvino/runtime/lib/intel64/

# Add Nvidia dev tool if needed
RUN apt-get update ; \
    apt-get install -y --no-install-recommends opencl-clhpp-headers opencl-c-headers intel-opencl-icd && \
    apt-get clean && rm -rf /var/lib/apt/lists/* && rm -rf /tmp/* ;
# hadolint ignore=DL3003

WORKDIR /ovms
# GPU testing in build img
COPY ./install_ubuntu_gpu_drivers.sh /tmp/install_gpu_drivers.sh
ARG INSTALL_DRIVER_VERSION="23.22.26516"
RUN /tmp/install_gpu_drivers.sh && \
    groupadd --gid 5000 ovms && \
    useradd --home-dir /home/ovms --create-home --uid 5000 --gid 5000 --groups 39,44 --shell /bin/bash --skel /dev/null ovms
# GPU testing in build img

# Build OpenVINO Model Server
COPY .bazelrc .user.bazelr[c] .bazelversion WORKSPACE /ovms/
COPY external /ovms/external/
# This path is required for namespace to setup Python dependencies for testing the binding
COPY src/BUILD /ovms/src/BUILD
COPY src/python/binding/BUILD /ovms/src/python/binding/BUILD
COPY src/python/binding/tests/requirements.txt /ovms/src/python/binding/tests/requirements.txt

ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/opt/intel/openvino/runtime/lib/intel64/:/opt/opencv/lib/:/opt/intel/openvino/runtime/3rdparty/tbb/lib

# FROM BASE BUILD
COPY --from=base_build /opt/opencv /opt/opencv/
COPY third_party /ovms/third_party/

# Mediapipe
COPY BUILD.bazel /ovms/
COPY *\.bzl /ovms/
COPY yarn.lock /ovms/
COPY package.json /ovms/

# prebuild dependencies before copying sources & test dependencies for caching
RUN bazel build --jobs=$JOBS ${debug_bazel_flags} //:ovms_dependencies @com_google_googletest//:gtest

COPY src/ /ovms/src/

# hadolint ignore=DL3059
RUN bazel build --jobs=$JOBS ${debug_bazel_flags} @org_tensorflow//tensorflow/core:framework

# hadolint ignore=DL3059
RUN if [ "$BASE_OS" == "ubuntu24" ] ; then update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.12 2; fi

# Sample CPU Extension
WORKDIR /ovms/src/example/SampleCpuExtension/
RUN make && cp libcustom_relu_cpu_extension.so /opt

RUN if ! [[ $debug_bazel_flags == *"py_off"* ]]; then true ; else exit 0 ; fi ; \
    mkdir -p /opt/intel/openvino/python/openvino-2025.2.dist-info && \
    echo $'Metadata-Version: 1.0\nName: openvino\nVersion: 2025.2' > /opt/intel/openvino/python/openvino-2025.2.dist-info/METADATA

WORKDIR /ovms

ARG PROJECT_VERSION="2025.2"
LABEL description="OpenVINO Model Server"
ARG minitrace_flags
ENV PYTHONPATH=/opt/intel/openvino/python:/ovms/bazel-bin/src/python/binding
# Set OVMS version strings
RUN bash -c "sed -i -e 's|REPLACE_PROJECT_VERSION|${PROJECT_VERSION}|g' /ovms/src/version.hpp" && \
    if [ "$ov_use_binary" == "1" ] ; then sed -i -e "s#REPLACE_OPENVINO_NAME#$(find /opt/intel/ -maxdepth 1 -mindepth 1 -type d | grep openvino | grep -Eo '[0-9]{4}.[0-9].[0-9].[^_]+')#g" /ovms/src/version.hpp ; fi && \
    if [ "$ov_use_binary" == "0" ] ; then sed -i -e "s#REPLACE_OPENVINO_NAME#$(git --git-dir /openvino/.git log -n 1 | head -n 1 | cut -d' ' -f2 | head -c 12)#g" /ovms/src/version.hpp ; fi && \
    bash -c "sed -i -e 's|REPLACE_BAZEL_BUILD_FLAGS|${debug_bazel_flags}${minitrace_flags}|g' /ovms/src/version.hpp"

WORKDIR /usr/lib/x86_64-linux-gnu/
RUN ln -s libOpenCL.so.1 libOpenCL.so
WORKDIR /ovms
# Test Coverage
COPY ci/check_coverage.bat /ovms/
ARG CHECK_COVERAGE=0
COPY run_unit_tests.sh prepare_llm_models.sh install_va.sh demos/common/export_models/export_model.py /ovms/

ARG FUZZER_BUILD=0
# Custom Nodes
# hadolint ignore=DL3059
RUN if [ "$FUZZER_BUILD" == "0" ]; then bazel build --jobs=$JOBS ${debug_bazel_flags} //src:release_custom_nodes; fi;

# OVMS
ARG OPTIMIZE_BUILDING_TESTS=0
# Builds unit tests together with ovms server in one step
# It speeds up CI when tests are executed outside of the image building
# hadolint ignore=SC2046
RUN if [ "$FUZZER_BUILD" == "0" ]; then bazel build --jobs=$JOBS ${debug_bazel_flags} ${minitrace_flags} //src:ovms $(if [ "${OPTIMIZE_BUILDING_TESTS}" == "1" ] ; then echo -n //src:ovms_test; fi); fi;

ARG RUN_TESTS=0
RUN if [ "$RUN_TESTS" == "1" ] ; then mkdir -p demos/common/export_models/ && mv export_model.py demos/common/export_models/ && ./prepare_llm_models.sh /ovms/src/test/llm_testing docker && ./run_unit_tests.sh ; fi

RUN if [ "$FUZZER_BUILD" == "0" ]; then /ovms/bazel-bin/src/ovms --version && /ovms/bazel-bin/src/ovms; fi;

COPY release_files/thirdparty-licenses/ /ovms/release_files/thirdparty-licenses/
COPY release_files/LICENSE /ovms/release_files/LICENSE
COPY client /client
RUN python3 -c "import json; m={'PROJECT_VERSION':'${PROJECT_VERSION}','OPENVINO backend':'$(/ovms/bazel-bin/src/ovms --version | grep backend | cut -d' ' -f3)', \
    'BAZEL_BUILD_FLAGS':'${debug_bazel_flags}${minitrace_flags}','BASE_IMAGE':'${BASE_IMAGE}' }; \
    print(json.dumps(m,indent=4))" > /ovms/release_files/metadata.json

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

FROM $BUILD_IMAGE as capi-build
SHELL ["/bin/bash", "-xo", "pipefail", "-c"]
# C api shared library
# hadolint ignore=DL3059
ARG CAPI_FLAGS="--strip=always --config mp_off_py_off --//:distro=ubuntu"
ARG JOBS=40
ARG FUZZER_BUILD=0
RUN bazel build --jobs=$JOBS ${CAPI_FLAGS} //src:ovms_shared

# C-API benchmark app
RUN if [ "$FUZZER_BUILD" == "0" ]; then bazel build --jobs=$JOBS ${CAPI_FLAGS} //src:capi_benchmark && ./bazel-bin/src/capi_benchmark --niter 2 --nstreams 1 --servable_name "dummy"; fi;

ARG FUZZER_BUILD=0
# C api app with bazel
# hadolint ignore=DL3059
RUN if [ "$FUZZER_BUILD" == "0" ]; then bazel build ${CAPI_FLAGS} --jobs $JOBS //src:capi_cpp_example; fi;

# C-api C/C++ app with gcc
COPY MakefileCapi /ovms/
RUN if [ "$FUZZER_BUILD" == "0" ]; then  CAPI_FLAGS=${CAPI_FLAGS} make -f MakefileCapi cpp && \
                                         CAPI_FLAGS=${CAPI_FLAGS} make -f MakefileCapi c; fi ;
RUN mkdir -p /ovms_release/lib/ ; find /ovms/bazel-out/k8-*/bin -iname 'libovms_shared.so' -exec cp -v {} /ovms_release/lib/ \;
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

FROM build as pkg

RUN mkdir /patchelf
WORKDIR /patchelf
# hadolint ignore=DL3003
RUN wget -q https://github.com/NixOS/patchelf/archive/0.10.tar.gz && \
    tar -xf 0.10.tar.gz && cd patchelf-0.10 && \
    ./bootstrap.sh && ./configure && make && make install

WORKDIR /
ARG BASE_OS=ubuntu
ARG ov_use_binary=0
ARG FUZZER_BUILD=0
ARG debug_bazel_flags=--strip=never\ --copt="-g "\ -c\ dbg
COPY --from=capi-build /ovms_release/lib/libovms_shared.so /ovms_release/lib/
COPY create_package.sh /
RUN ./create_package.sh

RUN chown -R ovms:ovms /ovms_release && \
    mkdir /licenses && ln -s /ovms_release/LICENSE /licenses && ln -s /ovms_release/thirdparty-licenses /licenses/thirdparty-licenses
# Remove capi library
RUN if [ -f /ovms_release/lib/libovms_shared.so ] ; then mv /ovms_release/lib/libovms_shared.so / ; fi ;

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

FROM $BASE_IMAGE as release
ARG INSTALL_RPMS_FROM_URL=
ARG INSTALL_DRIVER_VERSION="24.26.30049"
ARG GPU=0
ARG NPU=0
ENV DEBIAN_FRONTEND=noninteractive
ARG debug_bazel_flags=
LABEL bazel-build-flags=${debug_bazel_flags}
LABEL supported-devices="CPU=1 GPU=${GPU} NPU=${NPU}"
ARG BASE_IMAGE
LABEL base-image=${BASE_IMAGE}
ENV PYTHONPATH=/ovms/lib/python:/ovms/python_deps
SHELL ["/bin/bash", "-c"]

WORKDIR /

COPY release_files/drivers /drivers
SHELL ["/bin/bash", "-o", "pipefail", "-c"]
ARG INSTALL_DRIVER_VERSION="24.39.31294"
COPY ./install_ubuntu_gpu_drivers.sh /tmp/install_gpu_drivers.sh
# hadolint ignore=DL3003,SC2164
RUN apt-get update ; \
    apt-get install -y --no-install-recommends curl ca-certificates libxml2 || exit 1; \
    if [ "$GPU" == "1" ] ; then \
	/tmp/install_gpu_drivers.sh ; \
    fi ; \
    if [ "$NPU" == "1" ] ; then \
        mkdir /tmp/npu_deps && cd /tmp/npu_deps ; \
        apt-get update && apt-get install -y --no-install-recommends libtbb12 && \
        if [[ "$BASE_IMAGE" == *"22.04"* ]] ; then \
            curl -L -O https://github.com/intel/linux-npu-driver/releases/download/v1.19.0/intel-driver-compiler-npu_1.19.0.20250707-16111289554_ubuntu22.04_amd64.deb ; \
            curl -L -O https://github.com/intel/linux-npu-driver/releases/download/v1.19.0/intel-fw-npu_1.19.0.20250707-16111289554_ubuntu22.04_amd64.deb ; \
            curl -L -O https://github.com/intel/linux-npu-driver/releases/download/v1.19.0/intel-level-zero-npu_1.19.0.20250707-16111289554_ubuntu22.04_amd64.deb ; \
            curl -L -O https://github.com/oneapi-src/level-zero/releases/download/v1.22.4/level-zero_1.22.4+u22.04_amd64.deb ; \
        else \
            curl -L -O https://github.com/intel/linux-npu-driver/releases/download/v1.19.0/intel-driver-compiler-npu_1.19.0.20250707-16111289554_ubuntu24.04_amd64.deb ; \	
            curl -L -O https://github.com/intel/linux-npu-driver/releases/download/v1.19.0/intel-fw-npu_1.19.0.20250707-16111289554_ubuntu24.04_amd64.deb ; \
            curl -L -O https://github.com/intel/linux-npu-driver/releases/download/v1.19.0/intel-level-zero-npu_1.19.0.20250707-16111289554_ubuntu24.04_amd64.deb ; \
            curl -L -O https://github.com/oneapi-src/level-zero/releases/download/v1.22.4/level-zero_1.22.4+u24.04_amd64.deb ; \ 
        fi ; \      
        dpkg -i ./*.deb && rm -Rf /tmp/npu_deps ; \
    fi ; \
    apt-get clean ; \
    rm -rf /tmp/install_gpu_drivers.sh && \
    rm -rf /var/lib/apt/lists/* && rm -rf /tmp/* && \
    groupadd --gid 5000 ovms && \
    useradd --home-dir /home/ovms --create-home --uid 5000 --gid 5000 --groups 39,44 --shell /bin/bash --skel /dev/null ovms

COPY --from=pkg /ovms_release /ovms
# hadolint ignore=SC2114
RUN mv /ovms/bin/git* /usr/bin
COPY --from=build /usr/local/lib/python3.*/dist-packages/MarkupSafe-3.0.2.dist-info /ovms/python_deps/MarkupSafe-3.0.2.dist-info
COPY --from=build /usr/local/lib/python3.*/dist-packages/jinja2 /ovms/python_deps/jinja2
COPY --from=build /usr/local/lib/python3.*/dist-packages/jinja2-3.1.6.dist-info /ovms/python_deps/jinja2-3.1.6.dist-info
COPY --from=build /usr/local/lib/python3.*/dist-packages/markupsafe /ovms/python_deps/markupsafe

# For image with Python enabled install Python library
RUN if ! [[ $debug_bazel_flags == *"py_off"* ]]; then true ; else exit 0 ; fi ; \
    apt-get update -y ; \
    if [[ "$BASE_IMAGE" == *"22.04"* ]] ; then python_version=3.10; else python_version=3.12; fi; \
    apt-get install libpython$python_version --no-install-recommends -y && \
    apt-get clean && rm -rf /var/lib/apt/lists/* && rm -rf /tmp/*

ENV LD_LIBRARY_PATH=/ovms/lib

RUN echo "The source code of added GPL components is stored in https://storage.openvinotoolkit.org/repositories/openvino/ci_dependencies/container_gpl_sources/" > /ovms/thirdparty-licenses/GPL.txt
USER ovms
ENTRYPOINT ["/ovms/bin/ovms"]
