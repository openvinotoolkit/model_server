#
# Copyright (c) 2021 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

ARG BASE_IMAGE
FROM $BASE_IMAGE as base_build

LABEL version="1.0.0"

SHELL ["/bin/bash", "-xo", "pipefail", "-c"]

ARG JOBS
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install --no-install-recommends -y \
            build-essential \
            gcc-9 \
            g++-9 \
            make \
            cmake \
            automake \
            autoconf \
            curl \
            ca-certificates \
            git \
            libcurl4-openssl-dev \
            libssl-dev \
            libxml2-dev \
            patch \
            pkg-config \
            wget \
            zlib1g-dev && \
            update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 9 && \
            update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 9 && \
            apt-get clean && \
            rm -rf /var/lib/apt/lists/*

####### Azure SDK needs new boost:
WORKDIR /boost
# hadolint ignore=DL3003
RUN wget -nv https://sourceforge.net/projects/boost/files/boost/1.69.0/boost_1_69_0.tar.gz && \
tar xf boost_1_69_0.tar.gz && cd boost_1_69_0 && ./bootstrap.sh && \
sed -i -e 's|#if PTHREAD_STACK_MIN > 0|#ifdef PTHREAD_STACK_MIN|g' boost/thread/pthread/thread_data.hpp && \
# fix for compiler >=9.5 https://github.com/boostorg/thread/pull/297/files
./b2 -j ${JOBS} cxxstd=17 link=static cxxflags='-fPIC' cflags='-fPIC' \
--with-chrono --with-date_time --with-filesystem --with-program_options --with-system \
--with-random --with-thread --with-atomic --with-regex \
--with-log --with-locale \
install

COPY third_party /ovms/third_party/

####### Azure SDK
WORKDIR /azure
RUN apt-get update && apt-get install --no-install-recommends -y uuid uuid-dev && rm -rf /var/lib/apt/lists/*
RUN git clone --recurse-submodules --depth 1 --branch v2.10.16 https://github.com/Microsoft/cpprestsdk.git && \
    git clone --depth 1 --branch v7.5.0 https://github.com/Azure/azure-storage-cpp.git && \
    patch -d /azure/cpprestsdk/ -p1 < /ovms/third_party/cpprest/rest_sdk_v2.10.16.patch && \
    patch -d /azure/azure-storage-cpp/ -p1 </ovms/third_party/azure/azure_sdk.patch

WORKDIR /azure/cpprestsdk/Release/build.release
RUN cmake .. -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_CXX_FLAGS="-fPIC" -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DBoost_USE_STATIC_RUNTIME=ON -DBoost_USE_STATIC_LIBS=ON -DWERROR=OFF -DBUILD_SAMPLES=OFF -DBUILD_TESTS=OFF && make --jobs=$JOBS install

WORKDIR /azure/azure-storage-cpp/Microsoft.WindowsAzure.Storage/build.release
RUN CASABLANCA_DIR=/azure/cpprestsdk cmake .. -DCMAKE_CXX_FLAGS="-fPIC -Wno-error=deprecated-declarations" -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DBoost_USE_STATIC_RUNTIME=ON -DBoost_USE_STATIC_LIBS=ON -DCMAKE_VERBOSE_MAKEFILE=ON && make --jobs=$JOBS && make --jobs=$JOBS install
# no-error flag related to https://github.com/aws/aws-sdk-cpp/issues/1582
####### End of Azure SDK

# Build AWS S3 SDK
RUN git clone https://github.com/aws/aws-sdk-cpp.git --branch 1.7.129 --single-branch --depth 1 /awssdk
WORKDIR /awssdk/build
RUN cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_ONLY=s3 -DENABLE_TESTING=OFF -DBUILD_SHARED_LIBS=OFF -DMINIMIZE_SIZE=ON -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DFORCE_SHARED_CRT=OFF -DSIMPLE_INSTALL=OFF -DCMAKE_CXX_FLAGS="-D_GLIBCXX_USE_CXX11_ABI=1 -Wno-error=deprecated-declarations -Wuninitialized" .. && make --jobs=$JOBS

####### End of AWS S3 SDK

####### Build OpenCV
WORKDIR /ovms/third_party/opencv
RUN ./install_opencv.sh
####### End of OpenCV

################### BASE BUILD ##########################
FROM base_build as final_build
ENV DEBIAN_FRONTEND=noninteractive
SHELL ["/bin/bash", "-xo", "pipefail", "-c"]

RUN apt-get update && apt-get install --no-install-recommends -y \
            libgflags-dev \
            bc \
            default-jdk \
            gdb \
            lcov \
            libpugixml1v5 \
            libusb-dev \
            libusb-1.0-0-dev \
            libtool \
            libnuma-dev \
            libtbb2 \
            libssl-dev \
            nlohmann-json3-dev \
            python2 \
            python2-dev \
            unzip \
            vim \
            xz-utils && \
            apt-get clean && \
            rm -rf /var/lib/apt/lists/*

RUN apt-get update && apt-get install -y software-properties-common gpg gpg-agent --no-install-recommends && \
    add-apt-repository ppa:deadsnakes/ppa && \
    apt-get install -y python3.8 python3.8-dev python3.8-distutils python3-pip --no-install-recommends && \
    apt-get clean && rm -rf /var/lib/apt/lists/* && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 1 && \
    python3 -m pip install numpy==1.21.0 --no-cache-dir

ARG JOBS
ARG ov_use_binary=1
ARG sentencepiece=0
ARG ov_source_org=openvinotoolkit
ARG ov_contrib_org=openvinotoolkit
ARG DLDT_PACKAGE_URL
ARG ov_source_branch=master
ARG ov_contrib_branch=master
ARG APT_OV_PACKAGE=openvino-2022.1.0
ARG CMAKE_BUILD_TYPE=Release

# build_type=[ opt, dbg ]
ARG build_type=opt
ARG minitrace_flags
ENV HDDL_INSTALL_DIR=/opt/intel/openvino/deployment_tools/inference_engine/external/hddl
ENV TF_SYSTEM_LIBS="curl"
ENV TEST_LOG="/root/.cache/bazel/_bazel_root/bc57d4817a53cab8c785464da57d1983/execroot/ovms/bazel-out/test.log"
ARG NVIDIA=0
# hadolint ignore=DL3003
RUN if [[ "$sentencepiece" == "1" || "$NVIDIA" == "1" ]] ; then true ; else exit 0 ; fi ; git clone https://github.com/$ov_contrib_org/openvino_contrib.git /openvino_contrib && cd /openvino_contrib && git checkout $ov_contrib_branch && git submodule update --init --recursive

################### BUILD OPENVINO FROM SOURCE - buildarg ov_use_binary=0  ############################
# Build OpenVINO and nGraph (OV dependency) with D_GLIBCXX_USE_CXX11_ABI=0 or 1
# hadolint ignore=DL3003
RUN if [ "$ov_use_binary" == "0" ] ; then true ; else exit 0 ; fi ; git clone https://github.com/$ov_source_org/openvino.git /openvino && cd /openvino && git checkout $ov_source_branch && git submodule update --init --recursive
WORKDIR /openvino/build
RUN if [ "$ov_use_binary" == "0" ] ; then true ; else exit 0 ; fi ; cmake -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE -DENABLE_SAMPLES=0 -DNGRAPH_USE_CXX_ABI=1 -DCMAKE_CXX_FLAGS=" -D_GLIBCXX_USE_CXX11_ABI=1 -Wno-error=parentheses "  ..
RUN if [ "$ov_use_binary" == "0" ] ; then true ; else exit 0 ; fi ; make --jobs=$JOBS
RUN if [ "$ov_use_binary" == "0" ] ; then true ; else exit 0 ; fi ; make install
RUN if [ "$ov_use_binary" == "0" ] ; then true ; else exit 0 ; fi ; \
    mkdir -p /opt/intel/openvino/extras && \
    mkdir -p /opt/intel/openvino && \
    ln -s /openvino/inference-engine/temp/opencv_*_ubuntu20/opencv /opt/intel/openvino/extras && \
    ln -s /usr/local/runtime /opt/intel/openvino && \
    ln -s /openvino/scripts/setupvars/setupvars.sh /opt/intel/openvino/setupvars.sh && \
    ln -s /opt/intel/openvino /opt/intel/openvino_2023
################## END OF OPENVINO SOURCE BUILD ######################

ARG TEMP_DIR=/tmp/openvino_installer

################### TAKE OPENVINO FROM A BINARY RELEASE - buildarg ov_use_binary=1 (DEFAULT) ##########
WORKDIR $TEMP_DIR
# OV toolkit package
#RUN if [ "$ov_use_binary" = "1" ] && [ "$DLDT_PACKAGE_URL" != "" ]; then true ; else exit 0 ; fi ; mkdir -p $TEMP_DIR && cd $TEMP_DIR/ && \
#    wget $DLDT_PACKAGE_URL && \
#    chmod 755 l_openvino_toolkit_* && \
#    ./l_openvino_toolkit_* -a -s --eula accept && \
#    rm -rf /opt/intel/openvino && \
#    ln -s /opt/intel/openvino_2023 /opt/intel/openvino

# OV toolkit package
RUN if [ "$ov_use_binary" == "1" ] && [ "$DLDT_PACKAGE_URL" != "" ]; then true ; else exit 0 ; fi ; \
    wget -nv $DLDT_PACKAGE_URL && \
    mkdir /opt/intel && \
    tar -zxf l_openvino_toolkit*.tgz -C /opt/intel && \
    ln -s /opt/intel/l_openvino_toolkit* /opt/intel/openvino && \
    ln -s /opt/intel/l_openvino_toolkit* /opt/intel/openvino_2023

WORKDIR /
# apt package
RUN if [ "$ov_use_binary" = "1" ] && [ "$DLDT_PACKAGE_URL" = "" ] ; then true ; else exit 0 ; fi ; \
    echo "installing apt package" && \
    wget -nv https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB && \
    apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB && \
    echo "deb https://apt.repos.intel.com/openvino/2022 focal main" | tee /etc/apt/sources.list.d/intel-openvino-2022.list && \
    apt-get update && \
    apt-get install --no-install-recommends -y $APT_OV_PACKAGE && \
    rm -rf /var/lib/apt/lists/* && \
    ln -s /opt/intel/openvino_2023 /opt/intel/openvino

RUN wget -nv https://github.com/oneapi-src/oneTBB/releases/download/v2021.9.0/oneapi-tbb-2021.9.0-lin.tgz && \
    tar -xzf oneapi-tbb-2021.9.0-lin.tgz && \
    cp oneapi-tbb-2021.9.0/lib/intel64/gcc4.8/libtbb.so* /opt/intel/openvino/runtime/lib/intel64/

# install sample apps including benchmark_app
RUN if [ -f /opt/intel/openvino/samples/cpp/build_samples.sh ];  then /opt/intel/openvino/samples/cpp/build_samples.sh ; fi
#################### END OF OPENVINO BINARY INSTALL

# SENTENCEPIECE_EXTENSION
ENV OpenVINO_DIR=/opt/intel/openvino/runtime/cmake

WORKDIR /openvino_contrib/modules/custom_operations/user_ie_extensions
RUN if [ "$sentencepiece" == "1" ] ; then true ; else exit 0 ; fi ; cmake .. -DCMAKE_BUILD_TYPE=Release -DCUSTOM_OPERATIONS="sentence_piece" && cmake --build . --parallel $JOBS

# NVIDIA
ENV OPENVINO_BUILD_PATH=/cuda_plugin_build
ENV OPENVINO_HOME=/openvino
ENV OPENVINO_CONTRIB=/openvino_contrib

# Add Nvidia dev tool if needed
# hadolint ignore=DL3003
RUN if [ "$NVIDIA" == "1" ] ; then true ; else exit 0 ; fi ; \
    wget -nv https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin -O /etc/apt/preferences.d/cuda-repository-pin-600 ; \
    set -exuo pipefail ; \
    rm -f /etc/apt/apt.conf.d/docker-clean ; \
    if [[ ${enable_tensorrt-} == "1" ]] ; then dpkg -i /nv-tensorrt-repo-*.deb ; fi; \
    apt-get update && apt-get install --no-install-recommends -y \
      libzstd-dev \
      libcudnn8=8.8.0.121-1+cuda11.8 \
      libcudnn8-dev=8.8.0.121-1+cuda11.8 \
      libcutensor1=1.6.1.5-1 \
      libcutensor-dev=1.6.1.5-1 && \
    apt-get install --no-install-recommends -y cuda-11-8 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    pip3 install --no-cache-dir cython && \
    curl -L https://github.com/Kitware/ninja/releases/download/v1.10.0.gfb670.kitware.jobserver-1/ninja-1.10.0.gfb670.kitware.jobserver-1_x86_64-linux-gnu.tar.gz | tar xzv --strip-components=1 -C /usr/local/bin ; \
    curl https://github.com/mozilla/sccache/releases/download/v0.2.15/sccache-v0.2.15-x86_64-unknown-linux-musl.tar.gz -L | tar xvzC /usr/local/bin --strip-components=1 --wildcards '*/sccache' ; \
    chmod a+x /usr/local/bin/sccache ;

# hadolint ignore=DL3003
RUN if [ "$NVIDIA" == "1" ] ; then true ; else exit 0 ; fi ; \
    mkdir ${OPENVINO_BUILD_PATH} && \
    cd "${OPENVINO_BUILD_PATH}" && \
    cmake "${OPENVINO_HOME}" \
      -DENABLE_NVIDIA=ON \
      -DENABLE_TESTS=ON \
      -DBUILD_arm_plugin=OFF \
      -DBUILD_java_api=OFF \
      -DBUILD_custom_operations=OFF \
      -DBUILD_mo_pytorch=OFF \
      -DBUILD_optimum=OFF \
      -DBUILD_ovms_ai_extension=OFF \
      -DOPENVINO_EXTRA_MODULES="${OPENVINO_CONTRIB}/modules" \
      -DWHEEL_VERSION=2022.1.0 \
      -DVERBOSE_BUILD=ON \
      -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE && \
      cmake --build "${OPENVINO_BUILD_PATH}" --target openvino_nvidia_gpu_plugin -j $JOBS

# Set up Bazel
ENV BAZEL_VERSION 5.3.1
WORKDIR /bazel
RUN curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \
    chmod +x bazel-*.sh && \
    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh

# Build OpenVINO Model Server
WORKDIR /ovms
COPY .bazelrc WORKSPACE /ovms/
COPY external /ovms/external/

ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/opt/intel/openvino/runtime/lib/intel64/:/opt/opencv/lib/

ARG debug_bazel_flags=--strip=never\ --copt="-g "\ -c\ dbg 
RUN if [[ $debug_bazel_flags == *"MEDIAPIPE_DISABLE=1"* ]]; then true ; else exit 0 ; fi ; \
    sed -i -e 's|3.19.1|3.9.2|g' WORKSPACE && \
    sed -i -e 's|87407cd28e7a9c95d9f61a098a53cf031109d451a7763e7dd1253abf8b4df422|1fbf1c2962af287607232b2eddeaec9b4f4a7a6f5934e1a9276e9af76952f7e0|g' WORKSPACE

RUN bazel build --jobs=$JOBS ${debug_bazel_flags} @org_tensorflow//tensorflow/core:framework

# FROM BASE BUILD
COPY --from=base_build /opt/opencv /opt/opencv/
COPY third_party /ovms/third_party/

# Patch apple build scripts
# hadolint ignore=SC2046
RUN patch -d $(bazel info output_base)/external/build_bazel_rules_apple/ -p1 < /ovms/third_party/build_bazel_rules_apple/bazel_rules_apple.patch

# Mediapipe
COPY BUILD.bazel /ovms/
COPY yarn.lock /ovms/
COPY package.json /ovms/

# prebuild dependencies before copying sources
RUN bazel build --jobs=$JOBS ${debug_bazel_flags} //:ovms_dependencies

# Copy example clients into build image for static analysis
WORKDIR /example_cpp_client
COPY demos/common/cpp /example_cpp_client/cpp
COPY demos/benchmark/cpp/synthetic_client_async_benchmark.cpp demos/image_classification/cpp/*.cpp /example_cpp_client/cpp/src/

COPY src/ /ovms/src/

# Sample CPU Extension
WORKDIR /ovms/src/example/SampleCpuExtension/
RUN make

WORKDIR /ovms

ARG PROJECT_VERSION="2022.3"
ARG PROJECT_NAME="OpenVINO Model Server"
LABEL description=${PROJECT_NAME}

# Set OVMS version strings
RUN bash -c "sed -i -e 's|REPLACE_PROJECT_NAME|${PROJECT_NAME}|g' /ovms/src/version.hpp"
RUN if [ "$build_type" == "dbg" ] ; then bash -c "sed -i -e 's|REPLACE_PROJECT_VERSION|${PROJECT_VERSION}-debug|g' /ovms/src/version.hpp" ; else bash -c "sed -i -e 's|REPLACE_PROJECT_VERSION|${PROJECT_VERSION}|g' /ovms/src/version.hpp" ; fi ;
RUN if [ "$ov_use_binary" == "1" ] ; then true ; else exit 0 ; fi ; sed -i -e "s#REPLACE_OPENVINO_NAME#$(find /opt/intel/ -maxdepth 1 -mindepth 1 -type d | grep openvino | grep -Eo '[0-9]{4}.[0-9].[0-9].[0-9]+.[^_]+')#g" /ovms/src/version.hpp
RUN if [ "$ov_use_binary" == "0" ] ; then true ; else exit 0 ; fi ; sed -i -e "s#REPLACE_OPENVINO_NAME#$(git --git-dir /openvino/.git log -n 1 | head -n 1 | cut -d' ' -f2 | head -c 12)#g" /ovms/src/version.hpp

# Test Coverage
COPY ci/check_coverage.bat /ovms/
ARG CHECK_COVERAGE=0

ARG RUN_TESTS=1
RUN if [ "$RUN_TESTS" == "1" ] ; then if [ "$CHECK_COVERAGE" == "1" ] ; then \
    bazel coverage --combined_report=lcov --jobs=$JOBS ${debug_bazel_flags} --test_timeout=1800 --test_summary=detailed --test_output=streamed --test_filter=* //src:ovms_test > ${TEST_LOG} 2>&1 || { cat ${TEST_LOG} && rm -rf ${TEST_LOG} && exit 1 ; } && genhtml --output genhtml "$(bazel info output_path)/_coverage/_coverage_report.dat" ; fi ; \
    bazel test --jobs=$JOBS ${debug_bazel_flags} --test_timeout=1800 --test_summary=detailed --test_output=streamed --test_filter=* //src:ovms_test > ${TEST_LOG} 2>&1 || (cat ${TEST_LOG} && rm -rf ${TEST_LOG} && exit 1 ; ) && tail -n 100 ${TEST_LOG} && rm -rf ${TEST_LOG} ; fi ;

# C api shared library
RUN bazel build --jobs=$JOBS ${debug_bazel_flags} //src:ovms_shared

# C api app with bazel
# hadolint ignore=DL3059
RUN bazel build --jobs $JOBS ${debug_bazel_flags} //src:capi_cpp_example

# C-API benchmark app
RUN bazel build --jobs=$JOBS ${debug_bazel_flags} //src:capi_benchmark && ./bazel-bin/src/capi_benchmark --niter 2 --threads_per_ireq 2 --nireq 1 --servable_name "dummy" --inputs_names "b" --shape "b[1,10]"

# OVMS
RUN bazel build --jobs=$JOBS ${debug_bazel_flags} ${minitrace_flags} //src:ovms

# hadolint ignore=DL3059
RUN bazel build --jobs=$JOBS ${debug_bazel_flags} //src:libsampleloader.so

# C-api C/C++ app with gcc
COPY MakefileCapi /ovms/
RUN make -f MakefileCapi cpp BAZEL_DEBUG_FLAGS="${debug_bazel_flags}" && \
    make -f MakefileCapi c BAZEL_DEBUG_FLAGS="${debug_bazel_flags}"

ARG ovms_metadata_file
COPY ${ovms_metadata_file} metadata.json
 
RUN /ovms/bazel-bin/src/ovms --version && /ovms/bazel-bin/src/ovms

COPY release_files/thirdparty-licenses/ /ovms/release_files/thirdparty-licenses/
COPY release_files/LICENSE /ovms/release_files/LICENSE
COPY client /client

